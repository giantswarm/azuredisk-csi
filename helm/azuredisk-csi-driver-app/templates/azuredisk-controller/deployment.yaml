{{- $proxy := deepCopy .Values.cluster.proxy |  mustMerge .Values.proxy }}
kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ .Values.controller.name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Values.controller.name }}
    app.kubernetes.io/component: "azurediskController"
{{ include "azuredisk.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.controller.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.controller.name }}
  template:
    metadata:
      labels:
{{ include "azuredisk.labels" . | indent 8 }}
        app: {{ .Values.controller.name }}
{{- with .Values.controller.podLabels }}
{{ toYaml . | indent 8 }}
{{- end }}
    spec:
      hostNetwork: {{ .Values.controller.hostNetwork }}
      serviceAccountName: {{ .Values.serviceAccount.controller }}
      nodeSelector:
        kubernetes.io/os: linux
        {{- if .Values.controller.runOnMaster}}
        {{-  range $key, $value := $.Values.controller.masterNodeSelector }}
        {{ $key }}: {{ $value }}
        {{- end}}
        {{- end}}
      priorityClassName: system-cluster-critical
{{- with .Values.controller.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with .Values.controller.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
{{- end }}
      containers:
        - name: csi-provisioner
          image: "{{ .Values.image.baseRepo }}{{ .Values.image.csiProvisioner.repository }}:{{ .Values.image.csiProvisioner.tag }}"
          args:
            - "--feature-gates=Topology=true"
            - "--csi-address=$(ADDRESS)"
            - "--v=2"
            - "--timeout=15s"
            - "--leader-election"
            - "--leader-election-namespace={{ .Release.Namespace }}"
            - "--worker-threads={{ .Values.controller.provisionerWorkerThreads }}"
            - "--extra-create-metadata=true"
            - "--strict-topology=true"
            - "--kube-api-qps=50"
            - "--kube-api-burst=100"
          env:
            - name: ADDRESS
              value: /csi/csi.sock
          volumeMounts:
            - mountPath: /csi
              name: socket-dir
          resources: {{- toYaml .Values.controller.resources.csiProvisioner | nindent 12 }}
        - name: csi-attacher
          image: "{{ .Values.image.baseRepo }}{{ .Values.image.csiAttacher.repository }}:{{ .Values.image.csiAttacher.tag }}"
          args:
            - "-v=2"
            - "-csi-address=$(ADDRESS)"
            - "-timeout=1200s"
            - "-leader-election"
            - "--leader-election-namespace={{ .Release.Namespace }}"
            - "-worker-threads={{ .Values.controller.attacherWorkerThreads }}"
            - "-kube-api-qps=50"
            - "-kube-api-burst=100"
          env:
            - name: ADDRESS
              value: /csi/csi.sock
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
          resources: {{- toYaml .Values.controller.resources.csiAttacher | nindent 12 }}
        - name: csi-snapshotter
          image: "{{ .Values.image.baseRepo }}{{ .Values.snapshot.image.csiSnapshotter.repository }}:{{ .Values.snapshot.image.csiSnapshotter.tag }}"
          args:
            - "-csi-address=$(ADDRESS)"
            - "-leader-election"
            - "-v=2"
          env:
            - name: ADDRESS
              value: /csi/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
          resources: {{- toYaml .Values.controller.resources.csiSnapshotter | nindent 12 }}
        - name: csi-resizer
          image: "{{ .Values.image.baseRepo }}{{ .Values.image.csiResizer.repository }}:{{ .Values.image.csiResizer.tag }}"
          args:
            - "-csi-address=$(ADDRESS)"
            - "-v=2"
            - "-leader-election"
            - "--leader-election-namespace={{ .Release.Namespace }}"
            - '-handle-volume-inuse-error=false'
            - '-feature-gates=RecoverVolumeExpansionFailure=true'
            - "-timeout=240s"
          env:
            - name: ADDRESS
              value: /csi/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
          resources: {{- toYaml .Values.controller.resources.csiResizer | nindent 12 }}
        - name: liveness-probe
          image: "{{ .Values.image.baseRepo }}{{ .Values.image.livenessProbe.repository }}:{{ .Values.image.livenessProbe.tag }}"
          args:
            - --csi-address=/csi/csi.sock
            - --probe-timeout=3s
            - --health-port={{ .Values.controller.livenessProbe.healthPort }}
            - --v=2
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
          resources: {{- toYaml .Values.controller.resources.livenessProbe | nindent 12 }}
        - name: azuredisk
          image: "{{ .Values.image.baseRepo }}{{ .Values.image.azuredisk.repository }}:{{ .Values.image.azuredisk.tag }}"
          args:
            - "--v={{ .Values.controller.logLevel }}"
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--metrics-address=0.0.0.0:{{ .Values.controller.metricsPort }}"
            - "--disable-avset-nodes={{ .Values.controller.disableAvailabilitySetNodes }}"
            - "--drivername={{ .Values.driver.name }}"
            - "--cloud-config-secret-name={{ .Values.controller.cloudConfigSecretName }}"
            - "--cloud-config-secret-namespace={{ .Values.controller.cloudConfigSecretNamespace }}"
            - "--custom-user-agent={{ .Values.driver.customUserAgent }}"
            - "--user-agent-suffix={{ .Values.driver.userAgentSuffix }}"
            - "--allow-empty-cloud-config={{ .Values.controller.allowEmptyCloudConfig }}"
          ports:
            - containerPort: {{ .Values.controller.livenessProbe.healthPort }}
              name: healthz
              protocol: TCP
            - containerPort: {{ .Values.controller.metricsPort }}
              name: metrics
              protocol: TCP
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: healthz
            initialDelaySeconds: 30
            timeoutSeconds: 10
            periodSeconds: 30
          env:
            - name: AZURE_CREDENTIAL_FILE
              value: {{ .Values.linux.azure_credential_file }}
            - name: CSI_ENDPOINT
              value: unix:///csi/csi.sock
            {{- if and $proxy.noProxy $proxy.http $proxy.https }}
            - name: NO_PROXY
              value: {{ $proxy.noProxy }}
            - name: no_proxy
              value: {{ $proxy.noProxy }}
            - name: HTTP_PROXY
              value: {{ $proxy.http }}
            - name: http_proxy
              value: {{ $proxy.http }}
            - name: HTTPS_PROXY
              value: {{ $proxy.https }}
            - name: https_proxy
              value: {{ $proxy.https }}
            {{- end }}
          imagePullPolicy: {{ .Values.image.azuredisk.pullPolicy }}
          volumeMounts:
            - mountPath: /csi
              name: socket-dir
            - mountPath: /etc/kubernetes/
              name: azure-cred
          resources: {{- toYaml .Values.controller.resources.azuredisk | nindent 12 }}
      volumes:
        - name: socket-dir
          emptyDir: {}
        - name: azure-cred
          hostPath:
            path: /etc/kubernetes/
            type: DirectoryOrCreate

