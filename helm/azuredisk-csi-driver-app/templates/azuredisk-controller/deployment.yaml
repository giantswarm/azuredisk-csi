{{- $proxy := deepCopy .Values.cluster.proxy |  mustMerge .Values.proxy }}
kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ .Values.controller.name }}
  namespace: {{ .Release.Namespace }}
{{ include "azuredisk.labels" . | indent 2 }}
{{- with .Values.controller.labels }}
{{ . | toYaml | indent 4 }}
{{- end }}
{{- with .Values.controller.annotations }}
  annotations:
{{ . | toYaml | indent 4 }}
{{- end }}
spec:
  replicas: {{ .Values.controller.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.controller.name }}
  template:
    metadata:
{{ include "azuredisk.labels" . | indent 6 }}
        app: {{ .Values.controller.name }}
        {{- if .Values.workloadIdentity.clientID }}
        azure.workload.identity/use: "true"
        {{- end }}
{{- with .Values.controller.podLabels }}
{{ toYaml . | indent 8 }}
{{- end }}
{{- with .Values.controller.podAnnotations }}
      annotations:
{{ toYaml . | indent 8 }}
{{- end }}
    spec:
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.imagePullSecrets | indent 8 }}
      {{- end }}
      hostNetwork: {{ .Values.controller.hostNetwork }}
      serviceAccountName: {{ .Values.serviceAccount.controller }}
      securityContext:
        {{- with .Values.podSecurityContext }}
          {{- . | toYaml | nindent 8 }}
        {{- end }}
      nodeSelector:
        kubernetes.io/os: linux
{{- with .Values.controller.nodeSelector }}
{{ toYaml . | indent 8 }}
{{- end }}
        {{- if .Values.controller.runOnMaster}}
        node-role.kubernetes.io/master: ""
        {{- end}}
        {{- if .Values.controller.runOnControlPlane}}
        node-role.kubernetes.io/control-plane: ""
        {{- end}}
      priorityClassName: system-cluster-critical
      securityContext:
        seccompProfile:
          type: RuntimeDefault
{{- with .Values.controller.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with .Values.controller.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
{{- end }}
      {{- include "azuredisk.pullSecrets" . | indent 6 }}
      containers:
        - name: csi-provisioner
          image: "{{ .Values.image.baseRepo }}{{ .Values.image.csiProvisioner.repository }}:{{ .Values.image.csiProvisioner.tag }}"
          args:
            - "--feature-gates=Topology=true,HonorPVReclaimPolicy=true"
            - "--csi-address=$(ADDRESS)"
            - "--v=2"
            - "--timeout=30s"
            - "--leader-election"
            - "--leader-election-namespace={{ .Release.Namespace }}"
            - "--worker-threads={{ .Values.controller.provisionerWorkerThreads }}"
            - "--extra-create-metadata=true"
            - "--strict-topology=true"
            - "--kube-api-qps=50"
            - "--kube-api-burst=100"
          env:
            - name: ADDRESS
              value: /csi/csi.sock
          volumeMounts:
            - mountPath: /csi
              name: socket-dir
          resources: {{- toYaml .Values.controller.resources.csiProvisioner | nindent 12 }}
          securityContext:
            {{- with .Values.securityContext.default }}
              {{- . | toYaml | nindent 12 }}
            {{- end }}
        - name: csi-attacher
          image: "{{ .Values.image.baseRepo }}{{ .Values.image.csiAttacher.repository }}:{{ .Values.image.csiAttacher.tag }}"
          args:
            - "-v=2"
            - "-csi-address=$(ADDRESS)"
            - "-timeout=1200s"
            - "-leader-election"
            - "--leader-election-namespace={{ .Release.Namespace }}"
            - "-worker-threads={{ .Values.controller.attacherWorkerThreads }}"
            - "-kube-api-qps=200"
            - "-kube-api-burst=400"
          env:
            - name: ADDRESS
              value: /csi/csi.sock
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
          resources: {{- toYaml .Values.controller.resources.csiAttacher | nindent 12 }}
          securityContext:
            {{- with .Values.securityContext.default }}
              {{- . | toYaml | nindent 12 }}
            {{- end }}
        - name: csi-snapshotter
          image: "{{ .Values.image.baseRepo }}{{ .Values.snapshot.image.csiSnapshotter.repository }}:{{ .Values.snapshot.image.csiSnapshotter.tag }}"
          args:
            - "-csi-address=$(ADDRESS)"
            - "-leader-election"
            - "--leader-election-namespace={{ .Release.Namespace }}"
            - "-v=2"
            - "--timeout=1200s"
          env:
            - name: ADDRESS
              value: /csi/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
          resources: {{- toYaml .Values.controller.resources.csiSnapshotter | nindent 12 }}
          securityContext:
            {{- with .Values.securityContext.default }}
              {{- . | toYaml | nindent 12 }}
            {{- end }}
        - name: csi-resizer
          image: "{{ .Values.image.baseRepo }}{{ .Values.image.csiResizer.repository }}:{{ .Values.image.csiResizer.tag }}"
          args:
            - "-csi-address=$(ADDRESS)"
            - "-v=2"
            - "-leader-election"
            - "--leader-election-namespace={{ .Release.Namespace }}"
            - '-handle-volume-inuse-error=false'
            - '-feature-gates=RecoverVolumeExpansionFailure=true'
            - "-timeout=240s"
          env:
            - name: ADDRESS
              value: /csi/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
          resources: {{- toYaml .Values.controller.resources.csiResizer | nindent 12 }}
          securityContext:
            {{- with .Values.securityContext.default }}
              {{- . | toYaml | nindent 12 }}
            {{- end }}
        - name: liveness-probe
          image: "{{ .Values.image.baseRepo }}{{ .Values.image.livenessProbe.repository }}:{{ .Values.image.livenessProbe.tag }}"
          args:
            - --csi-address=/csi/csi.sock
            - --probe-timeout=3s
            - --health-port={{ .Values.controller.livenessProbe.healthPort }}
            - --v=2
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
          resources: {{- toYaml .Values.controller.resources.livenessProbe | nindent 12 }}
          securityContext:
            {{- with .Values.securityContext.default }}
              {{- . | toYaml | nindent 12 }}
            {{- end }}
        - name: azuredisk
          image: "{{ .Values.image.baseRepo }}{{ .Values.image.azuredisk.repository }}:{{ .Values.image.azuredisk.tag }}"
          args:
            - "--v={{ .Values.controller.logLevel }}"
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--metrics-address=0.0.0.0:{{ .Values.controller.metricsPort }}"
            - "--disable-avset-nodes={{ .Values.controller.disableAvailabilitySetNodes }}"
            - "--vm-type={{ .Values.controller.vmType }}"
            - "--drivername={{ .Values.driver.name }}"
            - "--cloud-config-secret-name={{ .Values.controller.cloudConfigSecretName }}"
            - "--cloud-config-secret-namespace={{ .Values.controller.cloudConfigSecretNamespace }}"
            - "--custom-user-agent={{ .Values.driver.customUserAgent }}"
            - "--user-agent-suffix={{ .Values.driver.userAgentSuffix }}"
            - "--allow-empty-cloud-config={{ .Values.controller.allowEmptyCloudConfig }}"
            - "--vmss-cache-ttl-seconds={{ .Values.controller.vmssCacheTTLInSeconds }}"
            - "--enable-traffic-manager={{ .Values.controller.enableTrafficManager }}"
            - "--traffic-manager-port={{ .Values.controller.trafficManagerPort }}"
            - "--enable-otel-tracing={{ .Values.controller.otelTracing.enabled }}"
            - "--check-disk-lun-collision=true"
            {{- range $value := .Values.controller.extraArgs }}
            - {{ $value | quote }}
            {{- end }}
          ports:
            - containerPort: {{ .Values.controller.metricsPort }}
              name: metrics
              protocol: TCP
{{- if ne .Values.controller.hostNetwork true }}
            - containerPort: {{ .Values.controller.livenessProbe.healthPort }}
              name: healthz
              protocol: TCP
{{- end }}
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
{{- if eq .Values.controller.hostNetwork true }}
              host: localhost
              port: {{ .Values.controller.livenessProbe.healthPort }}
{{- else }}
              port: healthz
{{- end }}
            initialDelaySeconds: 30
            timeoutSeconds: 10
            periodSeconds: 30
          env:
            - name: AZURE_CREDENTIAL_FILE
              value: {{ .Values.linux.azure_credential_file }}
            - name: CSI_ENDPOINT
              value: unix:///csi/csi.sock
            {{- if and $proxy.noProxy $proxy.http $proxy.https }}
            - name: NO_PROXY
              value: {{ $proxy.noProxy }}
            - name: no_proxy
              value: {{ $proxy.noProxy }}
            - name: HTTP_PROXY
              value: {{ $proxy.http }}
            - name: http_proxy
              value: {{ $proxy.http }}
            - name: HTTPS_PROXY
              value: {{ $proxy.https }}
            - name: https_proxy
              value: {{ $proxy.https }}
            {{- end }}
          imagePullPolicy: {{ .Values.image.azuredisk.pullPolicy }}
          volumeMounts:
            - mountPath: /csi
              name: socket-dir
            - mountPath: /etc/kubernetes/
              name: azure-cred
            {{- if eq .Values.cloud "AzureStackCloud" }}
            - name: ssl
              mountPath: /etc/ssl/certs
              readOnly: true
            {{- end }}
            {{- if eq .Values.linux.distro "fedora" }}
            - name: ssl
              mountPath: /etc/ssl/certs
              readOnly: true
            - name: ssl-pki
              mountPath: /etc/pki/ca-trust/extracted
              readOnly: true
            {{- end }}
          resources: {{- toYaml .Values.controller.resources.azuredisk | nindent 12 }}
          securityContext:
            {{- with .Values.securityContext.default }}
              {{- . | toYaml | nindent 12 }}
            {{- end }}
      volumes:
        - name: socket-dir
          emptyDir: {}
        - name: azure-cred
          hostPath:
            path: /etc/kubernetes/
            type: DirectoryOrCreate
        {{- if eq .Values.cloud "AzureStackCloud" }}
        - name: ssl
          hostPath:
            path: /etc/ssl/certs
        {{- end }}
        {{- if eq .Values.linux.distro "fedora" }}
        - name: ssl
          hostPath:
            path: /etc/ssl/certs
        - name: ssl-pki
          hostPath:
            path: /etc/pki/ca-trust/extracted
        {{- end }}
